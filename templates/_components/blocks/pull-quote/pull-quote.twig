{#
Pull Quote Component
Usage: {% include 'components/pull-quote.twig' with {
    quote: 'The inspiring quote text',
    attribution: 'Elder John Sumner',
    style: 'centered',
    size: 'large'
} %}
#}

{% set quoteStyle = style ?? 'centered' %}
{% set quoteSize = size ?? 'medium' %}
{% set showAttribution = attribution is defined and attribution is not empty %}

<blockquote class="pull-quote-component {{ 'style-' ~ quoteStyle }} {{ 'size-' ~ quoteSize }}">
    <div class="quote-content">
        <div class="quote-mark quote-mark-open">"</div>
        <div class="quote-text">
            {{ quote }}
        </div>
        <div class="quote-mark quote-mark-close">"</div>
    </div>

    {% if showAttribution %}
        <footer class="quote-attribution">
            <cite>{{ attribution }}</cite>
        </footer>
    {% endif %}
</blockquote>

<style>
    .pull-quote-component {
        margin: 3rem 0;
        position: relative;
        background: linear-gradient(135deg, #f7f3e9 0%, #fdf6e3 100%);
        border-radius: 12px;
        padding: 2.5rem;
        box-shadow: 0 4px 16px rgba(0,0,0,0.08);
        border-left: 5px solid #d4a574;
    }

    .quote-content {
        position: relative;
        display: flex;
        align-items: flex-start;
        gap: 0.5rem;
    }

    .quote-text {
        flex: 1;
        font-family: 'Georgia', serif;
        line-height: 1.6;
        color: #4a3428;
        font-style: italic;
    }

    .quote-mark {
        color: #d4a574;
        font-family: 'Georgia', serif;
        font-weight: bold;
        line-height: 1;
        opacity: 0.7;
    }

    .quote-mark-open {
        font-size: 3rem;
        margin-top: -0.5rem;
    }

    .quote-mark-close {
        font-size: 3rem;
        align-self: flex-end;
        margin-bottom: -0.5rem;
    }

    .quote-attribution {
        margin-top: 1.5rem;
        text-align: right;
        position: relative;
    }

    .quote-attribution:before {
        content: 'â€”';
        margin-right: 0.5rem;
        color: #d4a574;
    }

    .quote-attribution cite {
        color: #8a7a6a;
        font-style: normal;
        font-weight: 500;
        font-size: 0.95rem;
    }

    /* Style variants */
    .style-centered {
        text-align: center;
        max-width: 800px;
        margin-left: auto;
        margin-right: auto;
    }

    .style-centered .quote-attribution {
        text-align: center;
    }

    .style-left {
        text-align: left;
        margin-right: auto;
        max-width: 600px;
    }

    .style-floating-right {
        float: right;
        max-width: 400px;
        margin: 1rem 0 1rem 2rem;
        clear: right;
    }

    .style-floating-left {
        float: left;
        max-width: 400px;
        margin: 1rem 2rem 1rem 0;
        clear: left;
    }

    .style-full-width {
        max-width: 100%;
        padding: 3rem;
        margin: 4rem 0;
        background: linear-gradient(135deg, #d4a574 0%, #c89666 100%);
        color: white;
        border-left: none;
        border-top: 5px solid rgba(255,255,255,0.3);
    }

    .style-full-width .quote-text {
        color: white;
    }

    .style-full-width .quote-mark {
        color: rgba(255,255,255,0.7);
    }

    .style-full-width .quote-attribution cite {
        color: rgba(255,255,255,0.9);
    }

    /* Size variants */
    .size-small .quote-text {
        font-size: 1rem;
    }

    .size-small .quote-mark-open,
    .size-small .quote-mark-close {
        font-size: 2rem;
    }

    .size-medium .quote-text {
        font-size: 1.2rem;
    }

    .size-medium .quote-mark-open,
    .size-medium .quote-mark-close {
        font-size: 3rem;
    }

    .size-large .quote-text {
        font-size: 1.4rem;
    }

    .size-large .quote-mark-open,
    .size-large .quote-mark-close {
        font-size: 4rem;
    }

    .size-xlarge .quote-text {
        font-size: 1.6rem;
    }

    .size-xlarge .quote-mark-open,
    .size-xlarge .quote-mark-close {
        font-size: 5rem;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
        .pull-quote-component {
            margin: 2rem 0;
            padding: 2rem;
        }

        .style-floating-left,
        .style-floating-right {
            float: none;
            max-width: 100%;
            margin: 2rem 0;
        }

        .style-full-width {
            padding: 2rem;
            margin: 2rem 0;
        }

        .quote-mark-open,
        .quote-mark-close {
            font-size: 2.5rem !important;
        }

        .size-large .quote-text,
        .size-xlarge .quote-text {
            font-size: 1.2rem;
        }
    }

    @media (max-width: 480px) {
        .pull-quote-component {
            padding: 1.5rem;
            margin: 1.5rem 0;
        }

        .quote-content {
            flex-direction: column;
            gap: 0;
        }

        .quote-mark-open {
            align-self: flex-start;
            margin-bottom: -1rem;
        }

        .quote-mark-close {
            align-self: flex-end;
            margin-top: -1rem;
        }

        .quote-text {
            padding: 0 1rem;
        }
    }

    /* Animation on scroll (optional enhancement) */
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .pull-quote-component.animate-in {
        animation: fadeInUp 0.6s ease-out;
    }

    /* High contrast mode support */
    @media (prefers-contrast: high) {
        .pull-quote-component {
            border-left-width: 8px;
            border-left-color: #000;
        }

        .style-full-width {
            background: #000;
            color: #fff;
            border-top-color: #fff;
        }
    }
</style>

<script>
    // Optional: Add scroll animation
    document.addEventListener('DOMContentLoaded', function() {
        const quotes = document.querySelectorAll('.pull-quote-component');

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animate-in');
                }
            });
        }, {
            threshold: 0.1,
            rootMargin: '50px'
        });

        quotes.forEach(quote => {
            observer.observe(quote);
        });
    });
</script>