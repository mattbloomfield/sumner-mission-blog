{#
Image Gallery Component - Beach Theme
Usage: {% include '_components/blocks/image-gallery/image-gallery.twig' with {
    images: entry.galleryImages.all(),
    caption: 'Gallery caption',
    columns: 3,
    lightbox: true
} %}
#}

{% set galleryColumns = columns ?? 3 %}
{% set enableLightbox = lightbox ?? true %}
{% set galleryId = 'gallery-' ~ random() %}
{% set showCaption = caption is defined and caption is not empty %}

<div class="my-12 space-y-8">
    {% if showCaption %}
        <div class="text-center space-y-4">
            <h3 class="text-2xl md:text-3xl font-serif font-semibold text-ocean-800">
                {{ caption }}
            </h3>
            <div class="w-24 h-1 bg-gradient-to-r from-coral-400 to-sand-400 mx-auto rounded-full"></div>
        </div>
    {% endif %}

    {% if images %}
        <div class="grid gap-4
                    {% if galleryColumns == 2 %}grid-cols-1 md:grid-cols-2
                    {% elseif galleryColumns == 4 %}grid-cols-2 md:grid-cols-4
                    {% elseif galleryColumns == 5 %}grid-cols-2 md:grid-cols-3 lg:grid-cols-5
                    {% else %}grid-cols-1 md:grid-cols-2 lg:grid-cols-3{% endif %}"
             id="{{ galleryId }}">

            {% for image in images %}
                <div class="group relative bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden transform hover:-translate-y-2">
                    {% if enableLightbox %}
                    <a href="{{ image.getUrl('large') }}"
                       class="block relative"
                       data-lightbox="{{ galleryId }}"
                       data-title="{{ image.title ?? '' }}">
                        {% endif %}

                        <div class="aspect-square overflow-hidden relative">
                            <img src="{{ image.getUrl('medium') }}"
                                 alt="{{ image.title ?? 'Gallery image ' ~ loop.index }}"
                                 loading="lazy"
                                 class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500" />

                            <!-- Overlay -->
                            <div class="absolute inset-0 bg-gradient-to-t from-ocean-900/50 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-all duration-300 flex items-center justify-center">
                                <div class="text-white transform translate-y-4 group-hover:translate-y-0 transition-transform duration-300">
                                    {% if enableLightbox %}
                                        <div class="w-12 h-12 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center border border-white/30">
                                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"/>
                                            </svg>
                                        </div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>

                        {% if enableLightbox %}
                    </a>
                    {% endif %}

                    {% if image.title %}
                        <div class="p-4 bg-gradient-to-r from-sand-50 to-coral-50 border-t-2 border-coral-200">
                            <p class="text-ocean-700 font-medium text-center text-sm leading-relaxed">
                                {{ image.title }}
                            </p>
                        </div>
                    {% endif %}
                </div>
            {% endfor %}
        </div>
    {% else %}
        <div class="text-center py-16 px-8 bg-gradient-to-br from-sand-50 to-coral-50 rounded-2xl border-2 border-dashed border-sand-300">
            <div class="space-y-4">
                <div class="w-16 h-16 bg-sand-200 rounded-full mx-auto flex items-center justify-center">
                    <svg class="w-8 h-8 text-sand-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                    </svg>
                </div>
                <p class="text-sand-600 font-medium">No images available for this gallery.</p>
            </div>
        </div>
    {% endif %}
</div>

<script>
    // Enhanced gallery functionality
    document.addEventListener('DOMContentLoaded', function() {
        // Add loaded class when images load for smoother transitions
        const lazyImages = document.querySelectorAll('.gallery-item img[loading="lazy"]');
        lazyImages.forEach(img => {
            if (img.complete) {
                img.classList.add('loaded');
            } else {
                img.addEventListener('load', function() {
                    this.classList.add('loaded');
                    this.style.opacity = '1';
                });
            }
        });

        // Keyboard navigation for gallery links
        const galleryLinks = document.querySelectorAll('[data-lightbox] a');
        galleryLinks.forEach(link => {
            link.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    this.click();
                }
            });
        });

        // Add intersection observer for fade-in animation
        const galleryObserver = new IntersectionObserver((entries) => {
            entries.forEach((entry, index) => {
                if (entry.isIntersecting) {
                    setTimeout(() => {
                        entry.target.style.opacity = '1';
                        entry.target.style.transform = 'translateY(0)';
                    }, index * 100);
                }
            });
        }, {
            threshold: 0.1,
            rootMargin: '50px'
        });

        // Observe gallery items for animation
        const galleryItems = document.querySelectorAll('#{{ galleryId }} > div');
        galleryItems.forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
            galleryObserver.observe(item);
        });
    });
</script>